#!/usr/bin/env bash
set -eo pipefail

SCRIPT_DIR="$(
  cd "$(dirname "$0")"
  pwd -P
)"

function echoInfo() {
  echo "INFO: ${1}" 1>&2
  exit 1
}

function echoError() {
  echo "ERROR: ${1}" 1>&2
  exit 1
}

function errorUsage() {
  echo "${1}" 1>&2
  usage
  exit 1
}

# check prerequisites
for cmd in sed grep; do
  command -v ${cmd} >/dev/null || {
    echo >&2 "${cmd} must be installed - exiting..."
    exit 1
  }
done

# Arguments
DEFAULT_CONFIG_FILE="/etc/smee/smee.conf"
DEFAULT_SMEE_FILE="${PWD}/.smee"
DEFAULT_DEFAULT_FILE="/etc/smee/default.conf"

# Sub commands
DEFAULT_INIT=0
DEFAULT_RUN=1

function usage() {
  echo "Smee is a humble servant which provides working environments within containers."
  echo "usage: $0 [options] <command>"
  echo "sub-commands:"
  echo ""
  echo "        init                          Create a smee fileomma with initial configuration settings (optional)"
  echo "        run                           Runs a container based on the configuration defined in the smee file (default)"
  echo ""
  echo "arguments:"
  echo ""
  echo "        -s --smee-file                Path to configuration file configuring tool and environment (DEFAULT: ${DEFAULT_SMEE_FILE}) [ENV: SMEE_FILE]."
  echo "        -c --config-file              Path to configuration file used for general smee configuration (DEFAULT: ${DEFAULT_CONFIG_FILE}) [ENV: CONFIG_FILE]."
  echo "        -d --default-file             Path to configuration file used for default smee configuration (DEFAULT: ${DEFAULT_DEFAULT_FILE}) [ENV: DEFAULT_FILE]."
  echo "        -h --help:                    Shows this usage text."
  echo ""
  echo "environment variables:"
  echo ""
  echo "        SMEE_FILE:                    Path to configuration file configuring tool and environment (DEFAULT: ${DEFAULT_SMEE_FILE})."
  echo "        CONFIG_FILE:                  Path to configuration file used for general smee configuration (DEFAULT: ${DEFAULT_CONFIG_FILE})."
  echo "        DEFAULT_FILE:                 Path to configuration file used for default smee configuration (DEFAULT: ${DEFAULT_DEFAULT_FILE})."
}

while [[ $# -gt 0 ]]; do
  key="${1}"

  case $key in
  --smee-file | -s)
    shift
    export SMEE_FILE="${1}"
    shift
    ;;
  --config-file | -c)
    shift
    export CONFIG_FILE="${1}"
    shift
    ;;
  --default-file | -d)
    shift
    export DEFAULT_FILE="${1}"
    shift
    ;;
  --help | -h | help)
    usage
    exit 0
    ;;
  init)
    shift
    INIT=1
    RUN=0
    ;;
  run)
    shift
    INIT=0
    RUN=1
    ;;
  *)
    shift
    ;;
  esac
done

# Assign default values if optional argument is empty
for variable in SMEE_FILE CONFIG_FILE DEFAULT_FILE INIT RUN; do
  if [[ -z ${!variable} || ${!variable} == '<no value>' ]]; then
    default_var_name="DEFAULT_${variable}"
    export "${variable}=${!default_var_name}"
  fi
done

# Create initial configuration file
if [[ "${INIT}" == 1 ]]; then
  if [[ -f "${SMEE_FILE}" ]]; then
    echoError "Configuration file already exists"
  fi
  cp "${DEFAULT_FILE}" "${SMEE_FILE}"
  echoInfo "Configuration file created at ${SMEE_FILE}"
fi

# Run Smee with configuration
if [[ "${RUN}" == 1 ]]; then

  # Check for configuration file
  if [[ ! -f "${SMEE_FILE}" ]]; then
    echoError "Configuration file does not exist"
  fi

  # Load configuration
  source "${SMEE_FILE}"

  # Check for docker or podman executable
  if command -v docker >/dev/null; then
    SMEE_EXECUTABLE="docker"
  elif command -v podman >/dev/null; then
    SMEE_EXECUTABLE="podman"
  else
    echoError "No container runtime found"
  fi

  # Try to build image
  if [[ ${SMEE_BUILD} -gt 0 ]]; then
    ${SMEE_EXECUTABLE} build -t "${SMEE_IMAGE}" -f "${SMEE_BUILD_PATH}" .
  fi

  # Force pull image
  if [[ ${SMEE_PULL} -gt 0 ]]; then
    ${SMEE_EXECUTABLE} pull "${SMEE_IMAGE}"
  fi

  # Assemble args
  args=''
  if [ "${SMEE_RM}" -gt 0 ]; then
    args="${args} --rm"
  fi
  if [ "${SMEE_TTY}" -gt 0 ]; then
    args="${args} -ti"
  fi
  for p in ${SMEE_PORTS}; do
    args="${args} -p ${p}:${p}"
  done
  if [ "${SMEE_MOUNT_PASSWD}" -gt 0 ]; then
    args="${args} -v /etc/passwd:/etc/passwd:ro"
  fi
  if [ "${SMEE_MOUNT_GROUP}" -gt 0 ]; then
    args="${args} -v /etc/group:/etc/group:ro"
  fi
  for v in ${SMEE_MOUNTS_RO}; do
    args="${args} -v ${v}:${v}:ro"
  done
  for v in ${SMEE_MOUNTS_RW}; do
    args="${args} -v ${v}:${v}:rw"
  done
  for e in ${SMEE_ENV}; do
    args="${args} -e ${e}=${!e}"
  done

  # Execute!
  "${SMEE_EXECUTABLE}" run \
    ${args} \
    -u "${SMEE_USER}:${SMEE_GROUP}" \
    -v "${PWD}:${SMEE_WORKDIR}:${SMEE_WORKDIR_MODE}" \
    -w "${SMEE_WORKDIR}" \
    ${SMEE_ARGS} \
    "${SMEE_IMAGE}" \
    "${SMEE_COMMAND}" \
    "${@}"
fi
