name: Build and deploy DEB package/ APT repository
description: Builds the latest DEB package and deploys it within a APT repository to github pages
inputs:
  package-name:
    description: Name of the package
    required: true
  package-root:
    description: Path to directory containing the future package content
    required: true
  package-build-dir:
    description: Path to directory created during build
  maintainer:
    description: Maintainer of the package
    required: true
  version:
    description: Version of the package
    required: true
  arch:
    description: Supported arch of this package
  depends:
    description: List of package dependencies
  description:
    description: Description of the package
    required: true
  homepage:
    description: URL of homepage belonging to package
    required: true
  token:
    description: Token used to authenticate against Github API for deploying github pages
    required: true
  repository-sub-directory:
    description: In which sub directory of the github pages branch should the repository be deployed to
  repository-distros:
    description: OS version supported by repository"
    required: true
  repository-force-creation:
    description: Force re-creation of repository
  git_push_branch:
    description: Branch to push repository to
  gpg-private-key:
    description: Private key used to sign repository
    required: true
  gpg-public-key:
    description: Public key matching private key
    required: true
  gpg-private-key-passphrase:
    description: Passphrases used to unlock private key
runs:
  using: composite
  steps:
    - name: Create package
      shell: bash
      run: |
        # Create build dir
        mkdir -p "${PACKAGE_BUILD_DIR}"

        # Copy artifacts
        cp -R ${{ inputs.package-root }}/* "${PACKAGE_BUILD_DIR}"

        # Create DEBIAN directory
        mkdir -p "${PACKAGE_BUILD_DIR}/DEBIAN"
      env:
        PACKAGE_BUILD_DIR: ${{ inputs.package-build-dir || '.debpkg' }}

    - name: Build package
      id: build_deb
      uses: jiro4989/build-deb-action@v3
      with:
        package: ${{ inputs.package-name }}
        package_root: ${{ inputs.package-build-dir || '.debpkg' }}
        maintainer: ${{ inputs.maintainer }}
        version: ${{ inputs.version }}
        arch: ${{ inputs.arch || 'amd64' }}
        depends: ${{ inputs.depends || 'none' }}
        desc: ${{ inputs.description }}
        homepage: ${{ inputs.homepage }}

    - name: Install GPG
      shell: bash
      run: |
        sudo apt-get update \
        && sudo apt-get install -y gnupg

    - name: Import GPG private key
      shell: bash
      run: |
        echo "${{ inputs.gpg-private-key }}" | gpg --import
        echo "${{ inputs.gpg-public-key }}" | gpg --import

    - name: Export GPG public key
      shell: bash
      run: |
        gpg --export --armor > DEB-GPG-KEY

    - name: Checkout gh-pages branch
      uses: actions/checkout@v4
      with:
        ref: gh-pages
        path: gh-pages

    - name: Create apt repository if not existing
      shell: bash
      env:
        FORCE_REPOSITORY_CREATION: ${{ inputs.repository-force-creation }}
      run: |
        # Install dependencies
        sudo apt-get install -y dpkg-dev

        # Set paths
        REPOSITORY_DIR="target/${{ inputs.repository-sub-directory }}"
        POOL_DIR="${REPOSITORY_DIR}/pool/main"
        DIST_DIR="${REPOSITORY_DIR}/dists/stable"
        PACKAGE_METADATA_DIR="${DIST_DIR}/main/binary-${{ inputs.arch || 'amd64' }}"
        RELEASE_FILE="${DIST_DIR}/Release"
        INRELEASE_FILE="${DIST_DIR}/InRelease"

        # Create target directory
        echo "Creating target directory"
        mkdir -p target/

        # Check for old apt directory and copy it
        if [[ -d "gh-pages/${{ inputs.repository-sub-directory }}" ]]; then
          echo "Found old directory in gh-pages. Copying..."
          cp -a "gh-pages/${{ inputs.repository-sub-directory }}" ${REPOSITORY_DIR}
        else
          echo "No old directory found. Creating new one."
        fi

        # Ensure directories
        echo "Checking apt directory"
        if [[ ( ! -d "${REPOSITORY_DIR}" ) || ( "${{ inputs.repository-force-creation }}" == "true" ) ]]; then
          echo "Creating apt repository"
          mkdir -p "${POOL_DIR}"
          mkdir -p "${PACKAGE_METADATA_DIR}"
        else
          echo "Apt directory existing and force creation disabled. Skipping."
        fi

        # Copy package file
        echo "Copy package file"
        cp "${{ steps.build_deb.outputs.file_name }}" "${POOL_DIR}/"

        # Create metadata
        echo "Create metadata"
        dpkg-scanpackages --arch "${{ inputs.arch || 'amd64' }}" "${POOL_DIR}" > "${PACKAGE_METADATA_DIR}/Packages"
        sed -i 's|gh-pages/||g' "${PACKAGE_METADATA_DIR}/Packages"
        sed -i 's|apt/||g' "${PACKAGE_METADATA_DIR}/Packages"

        # Compress Packages file
        echo "Compress Packages file"
        cat "${PACKAGE_METADATA_DIR}/Packages" | gzip -9 > "${PACKAGE_METADATA_DIR}/Packages.gz"

        # Generate DEBIAN control file
        do_hash() {
          echo "${2}:"
          for file in $(find ${1} -type f); do
            sum=$(${3} "${file}" | awk '{print $1}')
            length=$(wc -c "${file}" | awk '{print $1}')
            filename=$(echo "${file}" | sed "s,${1}/,,")
            if [[ "${filename}" =~ InRelease|Release|Release\.gpg ]]; then
              continue
            else
              echo " ${sum} ${length} ${filename}"
            fi
          done
        }

        echo "Creating Release file"
        cat >"${RELEASE_FILE}" <<EOF
        Origin: ${{ inputs.package-name }}
        Label: ${{ inputs.package-name }}
        Suite: stable
        Codename: stable
        Version: 1.0
        Architectures: ${{ inputs.arch || 'amd64' }}
        Components: main
        Description: ${{ inputs.description }}
        Date: $(date -Ru)
        EOF

        # Generate hashes
        echo "Generating hashes"
        echo "Generating MD5Sum"
        do_hash "${DIST_DIR}" "MD5Sum" "md5sum" >> "${RELEASE_FILE}"
        echo "Generating SHA1"
        do_hash "${DIST_DIR}" "SHA1" "sha1sum" >> "${RELEASE_FILE}"
        echo "Generating SHA256"
        do_hash "${DIST_DIR}" "SHA256" "sha256sum" >> "${RELEASE_FILE}"

        # Sign Release file
        echo "Sign Release file"
        cat "${RELEASE_FILE}" | gpg -abs > "${RELEASE_FILE}.gpg"

        # Create InRelease file
        echo "Create InRelease file"
        cat "${RELEASE_FILE}" | gpg -abs --clearsign > "${INRELEASE_FILE}"

    - name: Add public GPG key
      shell: bash
      run: |
        echo "${{ inputs.gpg-public-key }}" > target/${{ inputs.repository-sub-directory }}/hauke-cloud.asc

    - name: Cache builds directory
      uses: actions/cache@v3
      with:
        path: target/${{ inputs.repository-sub-directory }}
        key: apt-${{ github.sha }}
