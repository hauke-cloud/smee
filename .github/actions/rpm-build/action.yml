name: Build and deploy RPM package/repository
description: Builds the latest RPM package and deploys it within a repository to github pages
inputs:
  package-name:
    description: Name of the package
    required: true
  version:
    description: Version of the package
    required: false
  desc:
    description: Description of the package
    required: true
  license:
    description: License under which this package will be published
    required: false
  source-directory:
    description: Relative path to directory containing the future package content
  spec-directory:
    description: Relative path to directory containing the spec files
  gpg-name:
    description: Internal name used to identity GPG key
  gpg-private-key:
    description: Private GPG key used to sign package / repository
    required: true
  gpg-public-key:
    description: Public GPG key used to sign package / repository
    required: true
  token:
    description: Token used to authenticate against Github API for deploying github pages
    required: true
  repository-sub-directory:
    description: In which sub directory of the github pages branch should the repository be deployed to
runs:
  using: composite
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-tags: true

    - name: Install RPM build tools
      shell: bash
      run: |
        sudo apt-get update \
        && sudo apt-get install -y rpm gnupg createrepo-c

    - name: Import GPG private key
      shell: bash
      run: |
        echo "${{ inputs.gpg-private-key }}" | gpg --import
        echo "${{ inputs.gpg-public-key }}" | gpg --import

    - name: Configure RPM macros for GPG signing
      shell: bash
      run: |
        echo "%_signature gpg" >> ~/.rpmmacros
        echo "%_gpg_name ${{ inputs.gpg-name || 'hauke.cloud' }}" >> ~/.rpmmacros
        echo "%_gpg_path ~/.gnupg" >> ~/.rpmmacros
        echo "%__gpg /usr/bin/gpg" >> ~/.rpmmacros

    - name: Export GPG public key
      shell: bash
      run: |
        gpg --export --armor > RPM-GPG-KEY

    - name: Build RPM package
      shell: bash
      id: rpm
      env:
        SOURCE_DIR: "${{ inputs.source-directory || 'src' }}"
        RPM_BUILD_DIR: "rpmbuild"
        PACKAGE_NAME: "${{ inputs.package-name }}"
        PACKAGE_FULL_NAME: "${{ inputs.package-name }}-${{ inputs.version || '0.0.0-dev' }}"
        PACKAGE_VERSION: "${{ inputs.version || '0.0.0-dev' }}"
      run: |
        set -eo pipefail

        # Set variables
        SOURCE_TARGET_DIR="~/${RPM_BUILD_DIR}/SOURCES/${PACKAGE_FULL_NAME}/"
        ARCHIVE_FILE="~/${RPM_BUILD_DIR}/SOURCES/${PACKAGE_FULL_NAME}.tar.gz"
        SPEC_FILE="~/${RPM_BUILD_DIR}/SPECS/${PACKAGE_NAME}.spec"

        echo "Create RPM directories"
        mkdir -p ~/${RPM_BUILD_DIR}/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
        ls -laR

        echo "Copy source files"
        mkdir -p "${SOURCE_TARGET_DIR}"
        cp -r ${SOURCE_DIR}/* "${SOURCE_TARGET_DIR}/"

        echo "List source directories"
        DIRECTORIES=$(find "${SOURCE_DIR}" -depth -type d | sed "s|${SOURCE_DIR}/||")

        echo "List source files"
        FILES=$(find "${SOURCE_DIR}" -depth -type f | sed "s|${SOURCE_DIR}/||")

        echo "Create spec file"
        echo "Creating Release file"
        ls -lar
        cat >"${SPEC_FILE}" <<EOF
        Name:           ${PACKAGE_NAME}
        Version:        ${{ inputs.version }}
        Release:        1%{?dist}
        Summary:        ${{ inputs.description }}

        License:        ${{ inputs.license || 'GPLv3' }}
        Source0:        %{name}-%{version}.tar.gz

        %global debug_package %{nil}

        %description
        ${{ inputs.description }}

        %prep
        %setup -q

        %build

        %install
        DIRECTORIES="${DIRECTORIES}"
        FILES="${FILES}"

        # Create directories
        for dir in \${DIRECTORIES}; do
          mkdir -p "%{buildroot}/${dir}"
        done

        # Copy files
        for file in \${FILES}; do
          cp -a "${file}" "%{buildroot}/${dir}"
        done

        %files
        ${FILES}

        %changelog
        ${{ inputs.changelog }}
        EOF

        echo "Creates source archive"
        ls -lar
        cd ~/${RPM_BUILD_DIR}/SOURCES/ \
        && tar -czvf "${ARCHIVE_FILE}" * \
        && cd ~

        echo "Build RPM package"
        rpmbuild -ba "${SPEC_FILE}"

    - name: Checkout gh-pages branch
      uses: actions/checkout@v4
      with:
        ref: gh-pages
        path: gh-pages

    - name: Create repository metadata
      shell: bash
      run: |
        echo "Create repository directory"
        mkdir -p ./rpm-repo/x86_64

        echo "Copy RPM-GPG-KEY file to repository directory"
        cp RPM-GPG-KEY ./rpm-repo/

        echo "Copy new rpm to repository directory"
        ls -la ~/rpmbuild/RPMS/x86_64/*
        cp ~/rpmbuild/RPMS/x86_64/*.rpm ./rpm-repo/x86_64/

        echo "Copy old rpms to repository directory"
        if [[ -d gh-pages/x86_64 ]]; then
          cp -r gh-pages/rpm/x86_64/* ./rpm-repo/x86_64/
        fi

        echo "Sign rpms"
        for rpm in ./rpm-repo/x86_64/*.rpm; do
          sudo -E rpm --addsign ${rpm}
        done

        echo "Create repository metadata"
        createrepo_c ./rpm-repo

        echo "Sign repository metadata"
        gpg --detach-sign --armor ./rpm-repo/repodata/repomd.xml
